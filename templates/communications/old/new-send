{% extends "base.html" %}
{% load static %}

{% block content %}
<h2>Send Message</h2>

<form method="post" enctype="multipart/form-data" id="target-group-form">
  {% csrf_token %}

  <fieldset>
    <legend>Communication Info</legend>
    {{ comm_form.as_p }}
  </fieldset>

  <fieldset>
    <legend>Target Group</legend>
    <p>{{ target_form.branch.label_tag }}<br>{{ target_form.branch }}</p>

    <div id="role-field" style="display:none;">
      <p>{{ target_form.role.label_tag }}<br>{{ target_form.role }}</p>
    </div>

    <div id="staff-fields" style="display:none;">
      <h3>Staff Type</h3>
      <p>{{ target_form.staff_type.label_tag }}<br>{{ target_form.staff_type }}</p>

      <div id="teaching-positions-wrapper" style="display:none;">
        <h3>Teaching Positions</h3>
        <p>{{ target_form.teaching_positions.label_tag }}<br>{{ target_form.teaching_positions }}</p>
      </div>

      <div id="non-teaching-positions-wrapper" style="display:none;">
        <h3>Non-Teaching Positions</h3>
        <p>{{ target_form.non_teaching_positions.label_tag }}<br>{{ target_form.non_teaching_positions }}</p>
      </div>
    </div>

    <div id="student-fields" style="display:none;">
      <h3>Student Class</h3>
      <p>{{ target_form.student_class.label_tag }}<br>{{ target_form.student_class }}</p>

      <h3>Class Arm</h3>
      <p>{{ target_form.class_arm.label_tag }}<br>{{ target_form.class_arm }}</p>
    </div>
  </fieldset>

  <fieldset>
    <legend>Attachments</legend>
    {{ attachment_formset.management_form }}
    <div id="attachments-wrapper">
      {% comment %}
        Render only the first 2 attachment forms initially, hide the rest but keep them in DOM
      {% endcomment %}
      {% for form in attachment_formset %}
        <div class="attachment-form" style="margin-bottom:10px; position:relative; {% if forloop.counter > 2 %}display:none;{% endif %}">
          {{ form.as_p }}
          <button type="button" class="remove-attachment-btn" style="color: white; background-color: red; border: none; padding: 5px 10px; cursor: pointer; position:absolute; top:5px; right:5px;">Remove</button>
        </div>
      {% endfor %}
    </div>
    <button type="button" id="add-attachment-btn" style="margin-top:10px;">Add Attachment</button>
  </fieldset>

  <div id="user-list-container" style="display:none; margin-top:20px;">
    <h3>Users who will receive the message</h3>
    <label><input type="checkbox" id="select-all-users"> Select All</label>
    <table border="1" id="user-list-table" style="width:100%; margin-top:10px;">
      <thead>
        <tr>
          <th>Select</th>
          <th>Username</th>
          <th>Email</th>
          <th>Role</th>
        </tr>
      </thead>
      <tbody>
        <!-- users inserted here -->
      </tbody>
    </table>
  </div>

  <button type="submit" style="margin-top:20px;">Submit</button>
</form>

<script>
document.addEventListener('DOMContentLoaded', function () {
  // Variables for target group form (existing logic) - no change here
  const branchField = document.querySelector('select[name="branch"]');
  const roleFieldWrapper = document.getElementById('role-field');
  const roleSelect = document.querySelector('select[name="role"]');
  const staffFields = document.getElementById('staff-fields');
  const studentFields = document.getElementById('student-fields');
  const userListContainer = document.getElementById('user-list-container');
  const userListTableBody = document.querySelector('#user-list-table tbody');
  const selectAllCheckbox = document.getElementById('select-all-users');

  const staffTypeSelect = document.querySelector('select[name="staff_type"]');
  const teachingPositionsWrapper = document.getElementById('teaching-positions-wrapper');
  const teachingPositionsSelect = document.querySelector('select[name="teaching_positions"]');
  const nonTeachingPositionsWrapper = document.getElementById('non-teaching-positions-wrapper');
  const nonTeachingPositionsSelect = document.querySelector('select[name="non_teaching_positions"]');

  const studentClassSelect = document.querySelector('select[name="student_class"]');
  const classArmSelect = document.querySelector('select[name="class_arm"]');

  // Attachment formset management
  const attachmentsWrapper = document.getElementById('attachments-wrapper');
  const addAttachmentBtn = document.getElementById('add-attachment-btn');
  const totalFormsInput = document.querySelector('#id_form-TOTAL_FORMS');
  const maxForms = 10; // maximum attachments allowed

  // Toggle Role Field visibility
  function toggleRoleField() {
    if (branchField.value) {
      roleFieldWrapper.style.display = 'block';
    } else {
      roleFieldWrapper.style.display = 'none';
      staffFields.style.display = 'none';
      studentFields.style.display = 'none';
      roleSelect.value = '';
      userListContainer.style.display = 'none';
      userListTableBody.innerHTML = '';
    }
  }

  // Toggle Staff or Student Fields
  function toggleStaffStudentFields() {
    const staffRoles = ['superadmin', 'branch_admin', 'staff'];

    if (staffRoles.includes(roleSelect.value)) {
      staffFields.style.display = 'block';
      studentFields.style.display = 'none';
    } else if (roleSelect.value === 'student') {
      staffFields.style.display = 'none';
      studentFields.style.display = 'block';
    } else {
      staffFields.style.display = 'none';
      studentFields.style.display = 'none';
    }
  }

  // Toggle Teaching/Non-Teaching Positions
  function toggleTeachingNonTeachingPositions() {
    if (!staffTypeSelect) return;

    const val = staffTypeSelect.value;
    if (val === 'teaching') {
      teachingPositionsWrapper.style.display = 'block';
      nonTeachingPositionsWrapper.style.display = 'none';
    } else if (val === 'non_teaching') {
      teachingPositionsWrapper.style.display = 'none';
      nonTeachingPositionsWrapper.style.display = 'block';
    } else if (val === 'both') {
      teachingPositionsWrapper.style.display = 'block';
      nonTeachingPositionsWrapper.style.display = 'block';
    } else {
      teachingPositionsWrapper.style.display = 'none';
      nonTeachingPositionsWrapper.style.display = 'none';
    }
  }

  // Fetch users based on selection (existing logic)
  function fetchUsersForTargetGroup() {
    const branch = branchField.value;
    const role = roleSelect.value;
    const staffType = staffTypeSelect ? staffTypeSelect.value : '';
    const teachingPositions = teachingPositionsSelect
      ? Array.from(teachingPositionsSelect.selectedOptions).map(opt => opt.value)
      : [];
    const nonTeachingPositions = nonTeachingPositionsSelect
      ? Array.from(nonTeachingPositionsSelect.selectedOptions).map(opt => opt.value)
      : [];
    const studentClass = studentClassSelect ? studentClassSelect.value : '';
    const classArm = classArmSelect ? classArmSelect.value : '';

    if (!branch || !role) {
      userListContainer.style.display = 'none';
      userListTableBody.innerHTML = '';
      return;
    }

    fetch("{% url 'get_target_users' %}", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': '{{ csrf_token }}',
      },
      body: JSON.stringify({
        branch: branch,
        role: role,
        staff_type: staffType,
        teaching_positions: teachingPositions,
        non_teaching_positions: nonTeachingPositions,
        student_class: studentClass,
        class_arm: classArm,
      }),
    })
    .then(response => response.json())
    .then(data => {
      userListTableBody.innerHTML = '';
      if (data.users && data.users.length > 0) {
        data.users.forEach(user => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td><input type="checkbox" name="selected_users" value="${user.id}"></td>
            <td>${user.username}</td>
            <td>${user.email}</td>
            <td>${user.role}</td>
          `;
          userListTableBody.appendChild(tr);
        });
        userListContainer.style.display = 'block';
      } else {
        userListTableBody.innerHTML = '<tr><td colspan="4">No users found.</td></tr>';
        userListContainer.style.display = 'block';
      }
    })
    .catch(error => {
      console.error('Error fetching users:', error);
      userListContainer.style.display = 'none';
      userListTableBody.innerHTML = '';
    });
  }

  // Event listeners for target group changes
  branchField.addEventListener('change', () => {
    toggleRoleField();
    toggleStaffStudentFields();
    fetchUsersForTargetGroup();
  });

  roleSelect.addEventListener('change', () => {
    toggleStaffStudentFields();
    fetchUsersForTargetGroup();
  });

  if (staffTypeSelect) {
    staffTypeSelect.addEventListener('change', () => {
      toggleTeachingNonTeachingPositions();
      fetchUsersForTargetGroup();
    });
  }

  if (teachingPositionsSelect) {
    teachingPositionsSelect.addEventListener('change', fetchUsersForTargetGroup);
  }

  if (nonTeachingPositionsSelect) {
    nonTeachingPositionsSelect.addEventListener('change', fetchUsersForTargetGroup);
  }

  if (studentClassSelect) {
    studentClassSelect.addEventListener('change', fetchUsersForTargetGroup);
  }

  if (classArmSelect) {
    classArmSelect.addEventListener('change', fetchUsersForTargetGroup);
  }

  selectAllCheckbox.addEventListener('change', () => {
    const checkboxes = document.querySelectorAll('#user-list-table tbody input[type="checkbox"]');
    checkboxes.forEach(cb => cb.checked = selectAllCheckbox.checked);
  });

  // Initialize display state on page load
  toggleRoleField();
  toggleStaffStudentFields();
  toggleTeachingNonTeachingPositions();

  // -------------------------------
  // Attachment Formset JS handling
  // -------------------------------

  // Function to update form indices in DOM after add/remove
  function updateFormIndices() {
    const forms = attachmentsWrapper.querySelectorAll('.attachment-form');
    forms.forEach((formDiv, index) => {
      formDiv.style.display = 'block'; // show all currently visible forms

      // Update form input names and ids
      formDiv.querySelectorAll('input, select, textarea').forEach(input => {
        const name = input.name;
        if (name) {
          const newName = name.replace(/form-\d+-/, `form-${index}-`);
          input.name = newName;
          const id = input.id;
          if (id) {
            input.id = id.replace(/form-\d+-/, `form-${index}-`);
          }
        }
      });
    });
    // Update TOTAL_FORMS count
    totalFormsInput.value = forms.length;

    // Enable/disable Add button if max reached
    if (forms.length >= maxForms) {
      addAttachmentBtn.disabled = true;
      addAttachmentBtn.style.opacity = '0.5';
      addAttachmentBtn.style.cursor = 'not-allowed';
    } else {
      addAttachmentBtn.disabled = false;
      addAttachmentBtn.style.opacity = '1';
      addAttachmentBtn.style.cursor = 'pointer';
    }
  }

  // Initially hide all forms beyond first 2
  const initialForms = attachmentsWrapper.querySelectorAll('.attachment-form');
  initialForms.forEach((formDiv, index) => {
    if (index >= 2) {
      formDiv.style.display = 'none';
    }
  });

  // Remove button event (delegation)
  attachmentsWrapper.addEventListener('click', function(e) {
    if (e.target && e.target.classList.contains('remove-attachment-btn')) {
      e.preventDefault();
      const forms = attachmentsWrapper.querySelectorAll('.attachment-form');
      if (forms.length <= 1) {
        alert('At least one attachment input is required.');
        return;
      }

      // Remove the form container
      const formDiv = e.target.closest('.attachment-form');
      if (formDiv) {
        formDiv.remove();
      }

      updateFormIndices();
    }
  });

  // Add attachment button click
  addAttachmentBtn.addEventListener('click', function(e) {
    e.preventDefault();
    let forms = attachmentsWrapper.querySelectorAll('.attachment-form');

    if (forms.length >= maxForms) {
      alert('Maximum attachments reached');
      return;
    }

    // Clone the last form (or hidden form if available)
    let newForm;
    // Find the first hidden form beyond current visible
    let hiddenForm = null;
    for(let i=0; i < initialForms.length; i++) {
      if(initialForms[i].style.display === 'none') {
        hiddenForm = initialForms[i];
        break;
      }
    }

    if (hiddenForm) {
      // Just show the hidden form
      hiddenForm.style.display = 'block';
      newForm = hiddenForm;
    } else {
      // No hidden form available, clone last visible form
      const lastForm = forms[forms.length - 1];
      newForm = lastForm.cloneNode(true);
      // Clear input value(s)
      newForm.querySelectorAll('input').forEach(input => {
        if (input.type === 'file') {
          input.value = '';
        } else {
          input.value = '';
        }
      });
      attachmentsWrapper.appendChild(newForm);
    }

    updateFormIndices();
  });

  updateFormIndices();
});
</script>

{% endblock %}
